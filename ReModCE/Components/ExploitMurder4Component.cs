using System;
using System.Collections.Generic;
using System.Linq;
using ReMod.Core;
using ReMod.Core.Managers;
using ReMod.Core.UI.QuickMenu;
using ReModCE_ARES.Loader;
using UnityEngine;
using VRC;
using VRC.Networking;
using VRC.SDK3.Components;
using VRC.SDKBase;
using VRC.Udon;
using VRC.Udon.Common.Interfaces;

namespace ReModCE_ARES.Components
{
    internal class ExploitMurder4Component : ModComponent
    {

        public ExploitMurder4Component()
        {

        }

        private readonly Il2CppSystem.Object[] SyncKill = new Il2CppSystem.Object[1] { "SyncKill" };

        public override void OnUiManagerInit(UiManager uiManager)
        {
            base.OnUiManagerInit(uiManager);

            var menu = uiManager.MainMenu.GetMenuPage("ARES");
            var subMenu = menu.GetMenuPage("World Cheats");
            var cheatMenu = subMenu.AddMenuPage("Murder 4");

            cheatMenu.AddButton($"Abort Game", "End the murder 4 game", () =>
            {EndGame();});

            cheatMenu.AddButton($"Blind Everyone", "Blind Everyone", () =>
            {BlindEveryone();});

            cheatMenu.AddButton($"Get all weapons", "Give yourself all the weapons", () =>
            { GetAllWeapons();});

            cheatMenu.AddButton($"Give Knife", "Give yourself a knife", () =>
            { GiveKnife(); });

            cheatMenu.AddButton($"Give Revolver", "Give yourself a Revolver", () =>
            { GiveRevolver(); });

            cheatMenu.AddButton($"Teleport Smoke", "Teleport Smoke To Your Position", () =>
            { GiveSmoke(); });

            cheatMenu.AddButton($"Bystander Win", "Bystander Win", () =>
            { BystanderWin(); });

            cheatMenu.AddButton($"Force Pickup", "Allows You To Steal Other's Pickups", () =>
            { ForcePickup(); });

            cheatMenu.AddButton($"Kill All", "Kill all players", () =>
            { KillAll(); });

            cheatMenu.AddButton($"Murder Win", "Murder Wins", () =>
            { MurderWin(); });

            cheatMenu.AddButton($"Open Doors", "Open all doors", () =>
            { OpenDoors(); });

            cheatMenu.AddButton($"Start Game", "Start the game", () =>
            { StartGame(); });
        }

        public void EndGame()
        {
            ReLogger.Msg("Game Aborted!");
            ReModCE_ARES.LogDebug("Game Aborted!");
            MurderCheat("SyncAbort");
        }
        public void BlindEveryone()
        {
            ReLogger.Msg("Blinded Everyone In The Lobby");
            ReModCE_ARES.LogDebug("Blinded Everyone In The Lobby");
            MurderCheat("OnLocalPlayerBlinded");
        }

        public void GetAllWeapons()
        {
            ReLogger.Msg("Gave yourself all weapons");
            ReModCE_ARES.LogDebug("Gave yourself all weapons");
            MurderGive("Revolver");
            MurderGive("Knife");
            MurderGive("Shotgun");
            MurderGive("Frag");
            MurderGive("Luger");
            MurderGive("Bear Trap");
        }

        public void GiveKnife()
        {
            ReLogger.Msg("Gave yourself a knife");
            ReModCE_ARES.LogDebug("Gave yourself a knife");
            MurderGive("Knife");
        }

        public void GiveRevolver()
        {
            ReLogger.Msg("Gave yourself a revolver");
            ReModCE_ARES.LogDebug("Killed Everyone");
            MurderGive("Revolver");
        }

        public void GiveSmoke()
        {
            ReLogger.Msg("Teleported Smoke To Your Position");
            ReModCE_ARES.LogDebug("Teleported Smoke To Your Position");
            MurderGive("Smoke");
        }

        public void BystanderWin()
        {
            ReLogger.Msg("Ended Game With The Bystanders As The Victor");
            ReModCE_ARES.LogDebug("Ended Game With The Bystanders As The Victor");
            MurderCheat("SyncVictoryB");
        }

        public void ForcePickup()
        {
            ReLogger.Msg("Force Pickup Is Active");
            PickupSteal();
        }

        public void KillAll()
        {
            ReLogger.Msg("Killed Everyone");
            ReModCE_ARES.LogDebug("Killed Everyone");
            Kill();
        }

        public void MurderWin()
        {
            ReLogger.Msg("Ended Game With The Murder As The Victor");
            ReModCE_ARES.LogDebug("Ended Game With The Murder As The Victor");
            MurderCheat("SyncVictoryM");
        }

        public void OpenDoors()
        {
            ReLogger.Msg("Opened All Doors");
            ReModCE_ARES.LogDebug("Opened All Doors");
            MurderCheat("SyncOpenL");
        }

        public void StartGame()
        {
            ReLogger.Msg("Started Game");
            ReModCE_ARES.LogDebug("Started Game");
            MurderCheat("Btn_Start");
        }

        public void Blank()
        {
            ReLogger.Msg("");
            ReModCE_ARES.LogDebug("");
            MurderCheat("");
        }

        public static void MurderCheat(string udonEvent)
        {
            if (!RoomManager.Method_Public_Static_String_0().Contains(""))
            {
                return;
            }
            foreach (GameObject item in Resources.FindObjectsOfTypeAll<GameObject>())
            {
                if (item.name.Contains("Game Logic"))
                {
                    item.GetComponent<UdonBehaviour>().SendCustomNetworkEvent(NetworkEventTarget.All, udonEvent);
                }
            }
        }

        public static void MurderGive(string ObjectName)
        {
            foreach (GameObject item in Resources.FindObjectsOfTypeAll<GameObject>())
            {
                if (item.name.Contains(ObjectName))
                {
                    Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, item);
                    item.transform.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.1f, 0f);
                }
            }
        }

        public static void PickupSteal()
        {
            VRC_Pickup[] array = Resources.FindObjectsOfTypeAll<VRC_Pickup>().ToArray();
            for (int i = 0; i < array.Length; i++)
            {
                if ((bool)array[i].gameObject)
                {
                    array[i].DisallowTheft = false;
                }
            }
            VRC_Pickup[] array2 = Resources.FindObjectsOfTypeAll<VRC_Pickup>().ToArray();
            for (int j = 0; j < array2.Length; j++)
            {
                if ((bool)array2[j].gameObject)
                {
                    array2[j].DisallowTheft = false;
                }
            }
            VRCPickup[] array3 = Resources.FindObjectsOfTypeAll<VRCPickup>().ToArray();
            for (int k = 0; k < array3.Length; k++)
            {
                if ((bool)array3[k].gameObject)
                {
                    array3[k].DisallowTheft = false;
                }
            }
        }

        private static int Count;
        private void Kill()
        {
            using IEnumerator<UdonSync> enumerator = Resources.FindObjectsOfTypeAll<UdonSync>().GetEnumerator();
            Count = 0;
            while (enumerator.MoveNext())
            {
                UdonSync current;
                if ((current = enumerator.Current).gameObject.name.Contains("Player Node"))
                {
                    Count++;
                    Networking.RPC(RPC.Destination.All, current.gameObject, "UdonSyncRunProgramAsRPC", SyncKill);
                }
            }
        }
    }
}
